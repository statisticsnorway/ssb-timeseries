[project]
name = "ssb-timeseries"
version = "0.6.1"
description = "SSB Timeseries"
authors = [{ name = "Bernhard Ryeng", email = "bernhard.ryeng@ssb.no" }]
license = "MIT"
readme = "README.md"
requires-python = ">=3.10,<4.0"
dynamic = ["classifiers"]
dependencies = [
    "typing-extensions>=4.11.0",   # "python-version"="<3.11",
    "python-dateutil>=2.9.0.post0",
    "tomli>=2.1.0",
    "tomli-w>=1.1.0",
    "matplotlib>=3.8.4",
    "narwhals>=1.38.0",
    "numpy>=1.26.4",
    "pandas>=2.1.1",
    "pandas-stubs>=2.2.3.250308",
    "polars>=1.5.0",
    "pyarrow>=14.0.0",
    "pyarrow-stubs>=20.0.0.20250627",
    "duckdb>=1.0.0",
    "dapla-toolbelt>=1.3.2",
    "ssb-klass-python>=0.0.7",
    "bigtree>=0.17.2",
    "multipledispatch>=1.0.0",
    "tzdata>=2025.2",
]

[project.urls]
homepage = "https://github.com/statisticsnorway/ssb-timeseries"
repository = "https://github.com/statisticsnorway/ssb-timeseries"
documentation = "https://statisticsnorway.github.io/ssb-timeseries"
Changelog = "https://github.com/statisticsnorway/ssb-timeseries/releases"

[project.scripts]
ssb-timeseries = "ssb_timeseries.__main__:main"
timeseries-config = "ssb_timeseries.config:main"

[tool.poetry]
classifiers = ["Development Status :: 4 - Beta"]
requires-poetry = ">=2.0"

[tool.poetry.group.dev.dependencies]
pygments = ">=2.10.0"
coverage = { extras = ["toml"], version = ">=6.2" }
furo = ">=2021.11.12"
mypy = "=1.10.1"
pre-commit = ">=2.16.0"
pre-commit-hooks = ">=4.1.0"
pytest = ">=6.2.5"
pytest-mypy = "^1.0.1"
ruff = ">=0.0.284"
sphinx = ">=6.2.1"
sphinx-autobuild = ">=2021.3.14"
sphinx-autodoc-typehints = ">=1.24.0"
sphinx-togglebutton = ">=0.3.2"
sphinx-copybutton = ">=0.5.2"
sphinx-click = ">=3.0.2"
typeguard = ">=2.13.3"
xdoctest = { extras = ["colors"], version = ">=0.15.10" }
myst-parser = { version = ">=0.16.1" }
deptry = ">=0.16.1"
click = ">=8.1.7"

[tool.poetry.requires-plugins]
poetry-plugin-export = ">=1.9"

[tool.pytest.ini_options]
pythonpath = ["src"]
#addopts = [ "--import-mode=importlib", ] # RYE: not needed? (added in a wild goose chase)
filterwarnings = [
    "error",
    "error", "ignore::pytest.PytestUnraisableExceptionWarning",
    #"ignore:'mode' parameter is deprecated:DeprecationWarning:PIL.*", # Introduced with Pillow 13; await pandas update.
]
# log_cli = true # does NOT fix issues with configuring loggers for testing

[tool.coverage.paths]
source = ["src", "*/site-packages"]
tests = ["tests", "*/tests"]

[tool.coverage.run]
branch = true
source = ["ssb_timeseries", "tests"]
relative_files = true

[tool.coverage.report]
show_missing = true
fail_under = 50

[tool.mypy]
strict = true
# warn_unreachable = true
pretty = true
show_column_numbers = true
show_error_context = true
disallow_any_generics = false
no_implicit_optional = false

[[tool.mypy.overrides]]
module = "tests.*"
disallow_untyped_defs = false       # Don't require functions to have type annotations
disallow_incomplete_defs = false    # Don't require functions to have type annotations
disallow_untyped_calls = false      # OK to call functions that are not fully annotated
ignore_errors = true              # Suppress ALL type errors from the tests directory.

[[tool.mypy.overrides]]
module = "noxfile.py"
ignore_errors = true
warn_unreachable = false

[tool.ruff]
force-exclude = true  # Apply excludes to pre-commit
show-fixes = true
src = ["src", "tests"]
target-version = "py311"  # Minimum Python version supported
include = ["*.py", "*.pyi", "**/pyproject.toml", "*.ipynb"]
extend-exclude = [
    "__pycache__",
    "old",
    ".ipynb_checkpoints",
    "noxfile.py",
    "docs/conf.py",
]

# Ruff rules may be customized as desired: https://docs.astral.sh/ruff/rules/
[tool.ruff.lint]
select = [
    "A",    # flkake8 - prevent using keywords that clobber python builtins
    "ANN",  # check type annotations
    "B",    # bugbear: security warnings
    "D",    # documentation
    "E",    # pycodestyle (errors)
    "F",    # pyflakes
    "I",    # sort imports
    "UP",   # alert you when better syntax is available in your python version
    "RUF",  # the ruff developer's own rules
]
#"ISC",  # implicit string concatenation (RYE: removed to harmonize lintin and formatting -> using Ruff only)
#"C4",   # flake8 comprehensions (RYE: add later)
#"W",    #pycodestyle (warnings) (RYE: add later)
ignore = [
    "ANN202", # Don't require return type annotation for private functions.
    "ANN401", # Allow type annotation with type Any.
    "D100",   # Supress undocumented-public-module. Only doc of public api required.
    "FBT001",  # Allow boolean positional arguments in a function
    "FBT002",  # Allow boolean default positional arguments in a function
    "E402",   # Supress module-import-not-at-top-of-file, needed in jupyter notebooks.
    "E501",   # Supress line-too-long warnings: trust black's judgement on this one.
    "PLR2004", # Allow to compare with unnamed numerical constants
]
#"A003",   # Don't mind shadowing builtin modules (applies to: io, logging, type).
#"A005",   # Accept Lambdas assigned to a variable.

[tool.ruff.lint.isort]
force-single-line = true

[tool.ruff.lint.mccabe]
max-complexity = 15

[tool.ruff.lint.pydocstyle]
convention = "google"  # You can also use "numpy".

[tool.ruff.lint.pylint]
max-args = 8

[tool.ruff.lint.pep8-naming]
classmethod-decorators = ["classmethod", "validator", "root_validator", "pydantic.validator"]

[tool.ruff.lint.per-file-ignores]
"*/__init__.py" = ["F401"]
"**/tests/*" = [
    "ANN001",  # type annotations don't add value for test functions
    "ANN002",  # type annotations don't add value for test functions
    "ANN003",  # type annotations don't add value for test functions
    "ANN201",  # type annotations don't add value for test functions
    "ANN204",  # type annotations don't add value for test functions
    "ANN205",  # type annotations don't add value for test functions
    "ANN206",  # type annotations don't add value for test functions
    "D100",    # docstrings are overkill for test functions
    "D101",
    "D102",
    "D103",
    "S101",    # asserts are encouraged in pytest
]

[tool.deptry.per_rule_ignores]
DEP001 = ["ssb_timeseries", "nox", "nox_poetry"]  # packages available by default

[build-system]
requires = ["poetry-core>=1.0.0"]
build-backend = "poetry.core.masonry.api"
